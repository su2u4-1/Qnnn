# qnnn grammar
code ::= [{<import> | <statement> | <function> | <class> | <comment_0> | <comment_1>}]
declare ::= (('var' | 'const') ['global'] | ('attr' | 'static') ['public']) <type> <identifier'var_name'> ['=' <expression>] [{',' <identifier'var_name'> ['=' <expression>]}] ';'
declare_args ::= ['*'] <type> <identifier'var_name'> [{',' ['*'] <type> <identifier'var_name'>}]
declare_typevar ::= '<' <identifier'type_name'> [{',' <identifier'type_name'>}] '>'
type ::= <builtin_type> | <identifier'class_name'> | <type> '<' <type> [{',' <type>}] '>'
expression ::= <term> {<operator> <term>}
term ::= ('^' | '@' | '-' | '!') <term> | <call> | <variable> | <value> | '(' <expression> ')'
call ::= <variable> ['<' <type> [{',' <type>}] '>'] '(' [<expression> [{',' <expression>}]] ')'
variable ::= <identifier'var_name'> | ('(' <expression> ')' | <variable>) ['[' <expression> ']' | '.' <identifier'attr_name'>]
value ::= <int> | <char> | <bool> | <null> | <string> | <float> | <arr> | <pointer> | <dict> | <tuple> | '^' <pointer>
arr ::= '[' <expression> [{',' <expression>}] ']'
pointer ::= '@' <variable>
dict ::= '{' [<built_in_types_non_container> ':' <expression> [{',' <expression'built_in_types_non_container'> ':' <expression>}]] '}'
built_in_types_non_container ::= 'int' | 'char' | 'bool' | 'str' | 'float'
tuple ::= '(' <expression> [{',' <expression>}] ')'
function ::= 'func' ['const'] <type> <identifier'func_name'> [<declare_typevar>] '(' [<declare_args>] ')' '{' {(<statement>)} '}'
class ::= 'class' <identifier'class_name'> [<declare_typevar>] '{' [{<declare'attr'> | <method> | <func>}] '}'
method ::= 'method' ['static'] ['public'] <type> (<identifier'method_name'> | <str'operator'>) [<declare_typevar>] '(' [<identifier'self'>] [',' <declare_args>] ')' '{' {<statement>} '}'
statement ::= <if> | <for> | <while> | <return> | <expression> ';' | <break> | <continue> | <pass> | <declare>
if ::= 'if' '(' <expression> ')' '{' {<statement>} '}' [{'elif' '(' <expression> ')' '{' {<statement>} '}'}] ['else' '{' {<statement>} '}']
for ::= 'for' [<identifier'label'>] '(' <type> <identifier'var_name'> 'in' <iterator> ')' '{' {<statement>} '}' ['else' '{' {<statement>} '}']
iterator ::= <variable> | <call>
while ::= 'while' [<identifier'label'>] '(' <expression> ')' '{' {<statement>} '}' ['else' '{' {<statement>} '}']
return ::= 'return' [<expression>] ';'
break ::= 'break' [<identifier'label'>] ';'
continue ::= 'continue' ';'
import ::= 'import' (<identifier'stdlib_name'> | <str'userlib_name'> 'as' <identifier'alias_name'>) ';'

# tokens type
identifier ::= (<atoz> | <AtoZ> | '_') {<atoz> | <AtoZ> | <digit> | '_'}
symbol ::= '(' | ')' | '[' | ']' | '{' | '}' | ',' | ';' | '.' | <operator>
int ::= ['-'] <digit> [{<digit>}]
char ::= "'" <unicode_character> "'"
string ::= '"' [{<unicode_character>}] '"'
float ::= ['-'] <digit> [{<digit>}] '.' <digit> [{<digit>}]
keyword ::= <bool> | <void> | <null> | <pass> | <builtin_type> | 'if' | 'elif' | 'else'
        | 'for' | 'in' | 'while' | 'return' | 'break' | 'continue' | 'import' | 'const'
        | 'global' | 'public' | 'func' | 'method' | 'class' | 'var' | 'as'
comment_0 ::= ('#' | "//") [{<unicode_character>}] '\n'
comment_1 ::= '/*' [{<unicode_character> | '\n'}] '*/'

# terminal symbol
atoz ::= 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm'
        | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z'
AtoZ ::= 'A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M'
        | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z'
digit ::= '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9'
unicode_character
builtin_type ::= 'int' | 'char' | 'bool' | 'void' | 'str' | 'float' | 'arr' | 'pointer'
        | 'range' | 'type' | 'tuple' | 'dict'
operator ::= '+' | '-' | '*' | '/' | '%' | '==' | '!=' | '<' | '>' | '<=' | '>=' | '&&'
| '||' | '&' | '|' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '**' | '@' | '^' | '<<'
| '>>' | '!'
bool ::= 'true' | 'false'
void ::= 'void'
null ::= 'NULL'
pass ::= 'pass'

# P operator         description
# 1 ! - @ ^ **       logic not, neg, get address, dereference, power
# 2 * / %            mul, div, rem
# 3 + -              add, sub
# 4 << >>            left shift, right shift
# 5 < <= > >=        <, ≤, >, ≥
# 6 == !=            =, ≠
# 7 & |              bit and, bit or
# 8 && ||            logic and, logic or
# 9 = += -= *= /= %= assign, add assign, sub assign, mul assign, div assign, rem assign
