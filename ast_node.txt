type = "program"
value = {}
children = [
    Node("import") or
    Node("declare_var") or
    Node("if") or
    Node("for") or
    Node("while") or
    Node("func") or
    Node("class") or
    Node("expression") or
    Node("pass"), *n
]

type = "import"
value = {
    "name": "stdlib" or string,
    "alias": "stdlib" or identifier
}
children = {}

type = "declare_var"
value = {
    "kind": "var" or "const",
    "modifier": "local" or "global",
    "name": identifier
}
children = [
    Node("type"),
    Node("expression") / maybe
]

type = "declare_attr"
value = {
    "kind": "attr" or "static",
    "modifier": "local" or "public",
    "name": identifier
}
children = [
    Node("type"),
    Node("expression")
]

type = "type"
value = {
    "name": BUILTINTYPE or identifier
}
children = [
    Node("type"), *n
]

type = "expression"
value = {}
children = [
    Node("term") or Node("operator"), *n
]

type = "operator"
value = {
    "value": operator
}
children = []

type = "term"
value = {
    "type": "str" or
            "int" or
            "bool" or
            "float" or
            "arr" or
            "dict" or
            "tuple" or
            "pointer" or
            "dereference" or
            "neg" or
            "not" or
            "expression" or
            "call" or
            "variable" or
            "null" or
            "void" or
            "char"
    "value": int or char or bool or null or string or float or arr or pointer or dict or tuple
}
children = [
    Node("variable") or
    Node("term") or
    Node("expression") or
    Node("tuple") or
    Node("arr") or
    Node("dict") or
    Node("call")
]

type = "variable"
value = {
    "state": "index" or "attr"
}
children = [
    Node("call") or Node("variable") or Node("name"),
    Node("expression") or Node("name")
]

type = "name"
value = {
    "name": identifier or string
}
children = []

type = "value"
value = {
    value: int or char or bool or null or string or float or arr or pointer or dict or tuple or ^pointer
}
children = []

type = "call"
value = {}
children = [
    Node("variable"),
    Node("use_typevar"),
    Node("args_call")
]

type = "use_typevar"
value = {}
children = [
    Node("type"), *n
]

type = "typevar"
value = {}
children = [
    Node("declare_typevar"), *n
]

type = "declare_typevar"
value = {
    name: identifier
}
children = []

type = args_call
value = {}
children = [
    Node("expression"), *n
]

type = "statements"
value = {}
children = [
    Node("declare_var") or
    Node("declare_attr") or
    Node("if") or
    Node("for") or
    Node("while") or
    Node("break") or
    Node("return") or
    Node("continue") or
    Node("func") or
    Node("class") or
    Node("expression") or
    Node("pass"), *n
]

type = "func"
value = {
    "const": "true" or "false",
    "name": identifier,
}
children = [
    Node("type"),
    Node("typevar"),
    Node("args_declare"),
    Node("statements")
]

type = "args_declare"
value = {}
children = [
    Node("declare_arg"), *n
]

type = "declare_arg"
value = {
    "name": identifier,
    "tuple": "true" or "false"
}
children = [
    Node("type")
]

type = "class"
value = {
    "name" : "class_name"
}
children = [
    Node("declare_typevar"),
    Node("func") or Node("method") or Node("declare_attr"), *n
]

type = "method"
value = {
    "kind": "op" or "static" or "public" or "static public" or "private",
    "name": identifier,
    "self": "true" or "false"
}
children = [
    Node("type"),
    Node("typevar"),
    Node("args_declare"),
    Node("statements")
]

type = "arr"
value = {}
children = [
    Node("expression"), *n
]

type = "tuple"
value = {
    "length": int
}
children = [
    Node("expression"), *n
]

type = "dict"
value = {}
children = [
    Node("expression"), Node("expression"), *n
]

type = "if"
value = {
    "elif_n": int,
    "else": "true" or "false"
}
children = [
    Node("expression"), Node("statements"),
    Node("expression"), Node("statements"), *n
    Node("statements") /maybe
]

type = "for"
value = {
    "label": identifier or "for",
    "name": identifier
    "else": "true" or "false"
}
children = [
    Node("type"),
    Node("expression"),
    Node("statements"),
    Node("statements") /maybe
]

type = "while"
value = {
    "else": "true" or "false"
}
children = [
    Node("expression"),
    Node("statements"),
    Node("statements") /maybe
]

type = "break"
value = {
    "label": identifier or "break"
}
children = {}

type = "return"
value = {}
children = [
    Node("expression") /maybe
]