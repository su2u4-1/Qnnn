# identifier: const(normal, const), scope(global, file, class, subroutine), type, parent

import list;  # import stdlib
#      ^ const, file, lib, example
import "<path>/userlib" as userlib;  # import userlib
#                          ^ const, file, lib, example

var int a = 0;  # normal, file, int, example
const int b = 1;  # const, file, int, example
var global int c = 2;  # normal, global, int, example
const global int d = b + c * b - a;  # const, global, int, example
var str e = "hello";  # normal, file, str, example
const str f = "world";  # const, file, str, example

print(e, f);

var pointer<int> p = @a;  # normal, file, pointer<int>, example
var type T = type(pointer, int);  # normal, file, type, example
var T p2 = @b;  # normal, file, T, example
# T == pointer<int>
var arr<T> p_arr = [p, p2];  # normal, file, arr<T>, example
# arr<T> == arr<pointer<int>>

func int main<T>(T a) {  # const, file, func, example
    var int e = 4;  # normal, subroutine, int, example.main
    const int f = 5;  # const, subroutine, int, example.main

    var global int g = 6;  # error
    const global int h = 7;  # error

    var pointer<T> p3 = @a;  # normal, subroutine, pointer<T>, example.main

    return 0;
}

class A {  # const, file, class, example
    attr int i = 0;  # normal, class.private, int, example.A
    static int j = 1;  # static, class.private, int, example.A

    // attr global int k = 2;  # error
    // static global int l = 3;  # error

    attr public int i = 0;  # normal, class.public, int, example.A
    static public int j = 1;  # static, class.public, int, example.A

    method public void _init(self, int m) {  # const, class.public, A, example.A
        #                          ^ normal, subroutine, int, example.A.init

        var int n = 4;  # normal, subroutine, int, example.A.init
        const int o = 5;  # const, subroutine, int, example.A.init

        var global int p = 6;  # error
        const global int q = 7;  # error
    }

    method A _init(self) {  # const, class.private, A, example.A
        return self;
    }
}

for label (int i in range(0, 10, 1)) {
    #|         ^ normal, block, int, loop_0
    #^ normal, block, int, loop_0
    print(i);
    while (true) {
        var str t = input("stop?: ");  # normal, block, int, loop_1
        if (t[0] == 'Y' || t[0] == 'y') {
            break label;
        } elif (t.length == 1) {
            break;
        } else {
            print(i, i, i);
        }
    }
} else {
    print("done");
}

var char t = input(": ")[0];  # normal, file, char, example
if (t == 'a') {
    print("aaa");
} elif (t == 'b') {
    print("bbb");
} else {
    print("???");
}

var bool r = ^(@(!(1 + 1 - 1 * 1 / 1 % 1 == 1 != 1 < 1 > 1 <= 1 >= 1 && 1 || 1 & 1 | 1 = 1 += 1 -= 1 *= 1 /= 1 %= 1 ** 1 << 1 >> 1)));
#    ^ normal, file, bool, example

var int a1, a2 = 0;
var int a3;
var int a4 = 0, a5;
var int a6, a7;
var int a8 = 0, a9 = 0;
