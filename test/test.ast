program (name: /d/Qnnn/./test/test0.qn, )
{
    import (alias: stdlib, name: list, ) {}
    import (alias: test1, name: ./test1, ) {}
    declare_var (kind: const, modifier: global, name: a, )
    {
        type (name: int, ) {}
        expression ()
        {
            term (type: int, value: 0, ) {}
        }
    }
    func (const: false, name: main, )
    {
        type (name: int, ) {}
        typevar () {}
        args_declare ()
        {
            declare_arg (name: args, tuple: true, )
            {
                type (name: string, ) {}
            }
        }
        statements ()
        {
            declare_var (kind: var, modifier: local, name: l, )
            {
                type (name: list, )
                {
                    type (name: int, ) {}
                }
                expression ()
                {
                    term (type: call, )
                    {
                        call ()
                        {
                            variable (state: false, )
                            {
                                name (name: list, ) {}
                            }
                            use_typevar ()
                            {
                                type (name: int, ) {}
                            }
                            args_call ()
                            {
                                expression ()
                                {
                                    term (type: int, value: 1, ) {}
                                }
                                expression ()
                                {
                                    term (type: int, value: 2, ) {}
                                }
                                expression ()
                                {
                                    term (type: int, value: 3, ) {}
                                }
                                expression ()
                                {
                                    term (type: int, value: 4, ) {}
                                }
                                expression ()
                                {
                                    term (type: int, value: 5, ) {}
                                }
                            }
                        }
                    }
                }
            }
            declare_var (kind: const, modifier: local, name: b, )
            {
                type (name: Test, ) {}
                expression ()
                {
                    term (type: call, )
                    {
                        call ()
                        {
                            variable (state: attr, )
                            {
                                variable (state: false, )
                                {
                                    name (name: test1, ) {}
                                }
                                name (name: Test, ) {}
                            }
                            use_typevar () {}
                            args_call ()
                            {
                                expression ()
                                {
                                    term (type: variable, )
                                    {
                                        variable (state: false, )
                                        {
                                            name (name: l, ) {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            expression ()
            {
                term (type: call, )
                {
                    call ()
                    {
                        variable (state: false, )
                        {
                            name (name: print, ) {}
                        }
                        use_typevar () {}
                        args_call ()
                        {
                            expression ()
                            {
                                term (type: variable, )
                                {
                                    variable (state: false, )
                                    {
                                        name (name: a, ) {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
            declare_var (kind: var, modifier: local, name: a, )
            {
                type (name: int, ) {}
                expression ()
                {
                    term (type: call, )
                    {
                        call ()
                        {
                            variable (state: attr, )
                            {
                                variable (state: false, )
                                {
                                    name (name: b, ) {}
                                }
                                name (name: get, ) {}
                            }
                            use_typevar () {}
                            args_call ()
                            {
                                expression ()
                                {
                                    term (type: int, value: 1, ) {}
                                }
                            }
                        }
                    }
                }
            }
            expression ()
            {
                term (type: call, )
                {
                    call ()
                    {
                        variable (state: false, )
                        {
                            name (name: print, ) {}
                        }
                        use_typevar () {}
                        args_call ()
                        {
                            expression ()
                            {
                                term (type: variable, )
                                {
                                    variable (state: false, )
                                    {
                                        name (name: a, ) {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return ()
            {
                expression ()
                {
                    term (type: int, value: 0, ) {}
                }
            }
        }
    }
}
program (name: /d/Qnnn/./stdlib/list.qn, )
{
    declare_var (kind: var, modifier: global, name: a, )
    {
        type (name: int, ) {}
        expression ()
        {
            term (type: int, value: 0, ) {}
        }
    }
}
program (name: /d/Qnnn/./test/./test1.qn, )
{
    import (alias: stdlib, name: list, ) {}
    class (name: Test, )
    {
        typevar () {}
        declare_attr (kind: attr, modifier: local, name: l, )
        {
            type (name: list, )
            {
                type (name: int, ) {}
            }
        }
        method (kind: private, name: init, )
        {
            type (name: operator, ) {}
            typevar () {}
            args_declare ()
            {
                declare_arg (name: l, tuple: false, )
                {
                    type (name: list, )
                    {
                        type (name: int, ) {}
                    }
                }
            }
            statements ()
            {
                expression ()
                {
                    term (type: variable, )
                    {
                        variable (state: attr, )
                        {
                            variable (state: false, )
                            {
                                name (name: self, ) {}
                            }
                            name (name: l, ) {}
                        }
                    }
                    term (type: variable, )
                    {
                        variable (state: false, )
                        {
                            name (name: l, ) {}
                        }
                    }
                    operator (value: =, ) {}
                }
                return () {}
            }
        }
        method (kind: public, name: get, )
        {
            type (name: int, ) {}
            typevar () {}
            args_declare ()
            {
                declare_arg (name: index, tuple: false, )
                {
                    type (name: int, ) {}
                }
            }
            statements ()
            {
                return ()
                {
                    expression ()
                    {
                        term (type: variable, )
                        {
                            variable (state: index, )
                            {
                                variable (state: attr, )
                                {
                                    variable (state: false, )
                                    {
                                        name (name: self, ) {}
                                    }
                                    name (name: l, ) {}
                                }
                                expression ()
                                {
                                    term (type: variable, )
                                    {
                                        variable (state: false, )
                                        {
                                            name (name: index, ) {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        method (kind: private, name: add, )
        {
            type (name: operator, ) {}
            typevar () {}
            args_declare ()
            {
                declare_arg (name: other, tuple: false, )
                {
                    type (name: list, )
                    {
                        type (name: int, ) {}
                    }
                }
            }
            statements ()
            {
                for (else: false, label: for, name: i, )
                {
                    type (name: int, ) {}
                    expression ()
                    {
                        term (type: variable, )
                        {
                            variable (state: false, )
                            {
                                name (name: other, ) {}
                            }
                        }
                    }
                    statements ()
                    {
                        expression ()
                        {
                            term (type: call, )
                            {
                                call ()
                                {
                                    variable (state: attr, )
                                    {
                                        variable (state: attr, )
                                        {
                                            variable (state: false, )
                                            {
                                                name (name: self, ) {}
                                            }
                                            name (name: l, ) {}
                                        }
                                        name (name: append, ) {}
                                    }
                                    use_typevar () {}
                                    args_call ()
                                    {
                                        expression ()
                                        {
                                            term (type: variable, )
                                            {
                                                variable (state: false, )
                                                {
                                                    name (name: i, ) {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                return () {}
            }
        }
    }
}
